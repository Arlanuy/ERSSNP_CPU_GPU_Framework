@model<booleanFunction>

def main(){
    call spiking_init_conf();
    call spiking_rules();
}

def spiking_init_conf(){
    @masynch = v1;  
    @mseq = v2;
    @mu = l_i, l_i1, l_i2, l_i3, l_i4, l_i5, l_i6, l_j, l_k, r;

    @marcs = (l_i, l_i1);
    @marcs += (l_i, l_i2);
    @marcs += (l_i, r);
    @marcs += (l_i1, l_i3);
    @marcs += (r, l_i3);
    @marcs += (l_i2, l_i4);
    @marcs += (r, l_i4);
    @marcs += (l_i3, l_i5);
    @marcs += (l_i4, l_i6);
    @marcs += (l_i5, l_j);
    @marcs += (l_i6, l_k);

    @min = l_i;

    @minst = (1, 1);

    @mout = l_j, l_k;
}

def spiking_rules(){
    [a*1 --> a*1]'l_i "a" :: 0;
    [a*1 --> a*1]'l_i1 "a" :: 1;
    [a*1 --> a*1]'l_i2 "a" :: 0;
    [a*3 --> a*1]'r "a(aa)+" :: 0;
    [a*1 --> a*1]'r "a" :: 1;
    [a*1 --> a*1]'l_i3 "a(aa)*" :: 0;
    [a*1 --> a*1]'l_i4 "a(aa)*" :: 0;
    [a*2 --> a*1]'l_i5 "aa" :: 0;
    [a*2 --> a*1]'l_i6 "aa" :: 0;
}
