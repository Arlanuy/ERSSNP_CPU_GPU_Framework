import yaml
ga_params  = {
  'runs':
    {0:
      {
        'population_size': 2,
        'mutation_rate': 100,
        'fitness_function': 1,
        'selection_func': 1,
        'generations':
        { 0:
          {
	          'best_fitness_result': 100,
	          'best_chromosome_indexes': [0,1],
	          'rssnp_chromosomes':
	           {
		          0:#rssnp index
		          # BITONIC
					{
					    'neurons': 28,
					    'synapses': 42,
					    'rules': [
					      [0, 4, (0, 1), 1, 1, 0], 
					      [0, 5, (0, 1), 1, 1, 0], 
					      [1, 4, (0, 1), 1, 1, 0], 
					      [1, 5, (0, 1), 1, 1, 0],
					      [2, 6, (0, 1), 1, 1, 0], 
					      [2, 7, (0, 1), 1, 1, 0], 
					      [3, 6, (0, 1), 1, 1, 0], 
					      [3, 7, (0, 1), 1, 1, 0],  
					      [4, 8, (2, 0), 2, 1, 0],
					      [4, 9, (2, 0), 2, 1, 0],
					      [4, 8, (1, 0), 1, 0, 0],
					      [4, 9, (1, 0), 1, 0, 0],
					      [5, 9, (2, 0), 2, 0, 0 ],
					      [5, 9, (1, 0), 1, 1, 0 ],
					      [6, 10, (2, 0), 2, 1, 0],
					      [6, 11, (2, 0), 2, 1, 0],
					      [6, 10, (1, 0), 1, 0, 0],
					      [6, 11, (1, 0), 1, 0, 0],
					      [7, 10, (2, 0), 2, 0, 0 ],
					      [7, 10, (1, 0), 1, 1, 0 ],
					      [8, 12, (0, 1), 1, 1, 0], 
					      [8, 13, (0, 1), 1, 1, 0], 
					      [9, 12, (0, 1), 1, 1, 0], 
					      [9, 13, (0, 1), 1, 1, 0],
					      [10, 14, (0, 1), 1, 1, 0], 
					      [10, 15, (0, 1), 1, 1, 0],
					      [11, 14, (0, 1), 1, 1, 0], 
					      [11, 15, (0, 1), 1, 1, 0],  
					      [12, 16, (2, 0), 2, 1, 0],
					      [12, 17, (2, 0), 2, 1, 0],
					      [12, 16, (1, 0), 1, 0, 0],
					      [12, 17, (1, 0), 1, 0, 0],
					      [13, 17, (2, 0), 2, 0, 0],
					      [13, 17, (1, 0), 1, 1, 0],
					      [14, 18, (2, 0), 2, 1, 0],
					      [14, 19, (2, 0), 2, 1, 0],
					      [14, 18, (1, 0), 1, 0, 0],
					      [14, 19, (1, 0), 1, 0, 0],
					      [15, 19, (2, 0), 2, 0, 0],
					      [15, 19, (1, 0), 1, 1, 0],
					      [16, 20, (0, 1), 1, 1, 0], 
					      [16, 21, (0, 1), 1, 1, 0], 
					      [18, 20, (0, 1), 1, 1, 0], 
					      [18, 21, (0, 1), 1, 1, 0],
					      [17, 22, (0, 1), 1, 1, 0], 
					      [17, 23, (0, 1), 1, 1, 0], 
					      [19, 22, (0, 1), 1, 1, 0], 
					      [19, 23, (0, 1), 1, 1, 0],  
					      [20, 24, (2, 0), 2, 1, 0],
					      [20, 26, (2, 0), 2, 1, 0],
					      [20, 24, (1, 0), 1, 0, 0],
					      [20, 26, (1, 0), 1, 0, 0],
					      [21, 26, (2, 0), 2, 0, 0],
					      [21, 26, (1, 0), 1, 1, 0],
					      [22, 25, (2, 0), 2, 1, 0],
					      [22, 27, (2, 0), 2, 1, 0],
					      [22, 25, (1, 0), 1, 0, 0],
					      [22, 27, (1, 0), 1, 0, 0],
					      [23, 27, (2, 0), 2, 0, 0],
					      [23, 27, (1, 0), 1, 1, 0]
					    ],
					    'init_config': [0 for x in range(28)],
					    'rule_status': [-1 for x in range(60)],
					    'input_neurons': [0, 1, 2, 3],
					    'output_neurons': [24, 25, 26, 27]
					},

				  1:#rssnp index
				  # BITONIC
					{
					    'neurons': 28,
					    'synapses': 42,
					    'rules': [
					      [0, 4, (0, 1), 1, 1, 0], 
					      [0, 5, (0, 1), 1, 1, 0], 
					      [1, 4, (0, 1), 1, 1, 0], 
					      [1, 5, (0, 1), 1, 1, 0],
					      [2, 6, (0, 1), 1, 1, 0], 
					      [2, 7, (0, 1), 1, 1, 0], 
					      [3, 6, (0, 1), 1, 1, 0], 
					      [3, 7, (0, 1), 1, 1, 0],  
					      [4, 8, (2, 0), 2, 1, 0],
					      [4, 9, (2, 0), 2, 1, 0],
					      [4, 8, (1, 0), 1, 0, 0],
					      [4, 9, (1, 0), 1, 0, 0],
					      [5, 9, (2, 0), 2, 0, 0 ],
					      [5, 9, (1, 0), 1, 1, 0 ],
					      [6, 10, (2, 0), 2, 1, 0],
					      [6, 11, (2, 0), 2, 1, 0],
					      [6, 10, (1, 0), 1, 0, 0],
					      [6, 11, (1, 0), 1, 0, 0],
					      [7, 10, (2, 0), 2, 0, 0 ],
					      [7, 10, (1, 0), 1, 1, 0 ],
					      [8, 12, (0, 1), 1, 1, 0], 
					      [8, 13, (0, 1), 1, 1, 0], 
					      [9, 12, (0, 1), 1, 1, 0], 
					      [9, 13, (0, 1), 1, 1, 0],
					      [10, 14, (0, 1), 1, 1, 0], 
					      [10, 15, (0, 1), 1, 1, 0],
					      [11, 14, (0, 1), 1, 1, 0], 
					      [11, 15, (0, 1), 1, 1, 0],  
					      [12, 16, (2, 0), 2, 1, 0],
					      [12, 17, (2, 0), 2, 1, 0],
					      [12, 16, (1, 0), 1, 0, 0],
					      [12, 17, (1, 0), 1, 0, 0],
					      [13, 17, (2, 0), 2, 0, 0],
					      [13, 17, (1, 0), 1, 1, 0],
					      [14, 18, (2, 0), 2, 1, 0],
					      [14, 19, (2, 0), 2, 1, 0],
					      [14, 18, (1, 0), 1, 0, 0],
					      [14, 19, (1, 0), 1, 0, 0],
					      [15, 19, (2, 0), 2, 0, 0],
					      [15, 19, (1, 0), 1, 1, 0],
					      [16, 20, (0, 1), 1, 1, 0], 
					      [16, 21, (0, 1), 1, 1, 0], 
					      [18, 20, (0, 1), 1, 1, 0], 
					      [18, 21, (0, 1), 1, 1, 0],
					      [17, 22, (0, 1), 1, 1, 0], 
					      [17, 23, (0, 1), 1, 1, 0], 
					      [19, 22, (0, 1), 1, 1, 0], 
					      [19, 23, (0, 1), 1, 1, 0],  
					      [20, 24, (2, 0), 2, 1, 0],
					      [20, 26, (2, 0), 2, 1, 0],
					      [20, 24, (1, 0), 1, 0, 0],
					      [20, 26, (1, 0), 1, 0, 0],
					      [21, 26, (2, 0), 2, 0, 0],
					      [21, 26, (1, 0), 1, 1, 0],
					      [22, 25, (2, 0), 2, 1, 0],
					      [22, 27, (2, 0), 2, 1, 0],
					      [22, 25, (1, 0), 1, 0, 0],
					      [22, 27, (1, 0), 1, 0, 0],
					      [23, 27, (2, 0), 2, 0, 0],
					      [23, 27, (1, 0), 1, 1, 0]
					    ],
					    'init_config': [0 for x in range(28)],
					    'rule_status': [-1 for x in range(60)],
					    'input_neurons': [0, 1, 2, 3],
					    'output_neurons': [24, 25, 26, 27]
					}
										
	    	  }
	    	}
    	}

      }
    }
 }

    
def conf_load(filename):
	with open(filename, 'r') as stream:
		try:
			ga_params = yaml.safe_load(stream)

			#getting generation zero from run zero
			generation_zero = ga_params['runs'][0]['generations'][0]
			print(generation_zero)

			#getting rssnp index 0 in generation zero
			rssnp_zero = generation_zero['rssnp_chromosomes'][0]
			print(rssnp_zero) 

		except yaml.YAMLError as exc:
			print(exc)

def conf_save(filename):
	with open(filename, 'w+') as out:
	  	doc = yaml.safe_dump(ga_params, out)

filename = 'ga_conf_out2.yaml'
conf_save(filename)
conf_load(filename)




